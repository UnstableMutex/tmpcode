    public class MyReflectionRowMapper<T> : IRowMapper<T> where T : new()
    {
        public MyReflectionRowMapper()
        {
            var t = typeof(T);
            var props = t.GetProperties();
            var d = new Dictionary<string, PropertyInfo>();
            foreach (var propertyInfo in props)
            {
                d.Add(propertyInfo.Name.ToLower(), propertyInfo);
            }
            dic = d;
        }
        protected string GetPropertyNameFromFieldName(string fieldName)
        {
            return fieldName;
        }
        private readonly IReadOnlyDictionary<string, PropertyInfo> dic;
        public T MapRow(IDataRecord row)
        {
            T obj = new T();
            for (int i = 0; i < row.FieldCount; i++)
            {
                var name = row.GetName(i);
                var n = GetPropertyNameFromFieldName(name);
                if (dic.ContainsKey(n.ToLower()))
                {
                    var p = dic[n.ToLower()];
                    if (!row.IsDBNull(i))
                    {
                        p.SetValue(obj, row[i]);
                    }
                }
            }
            return obj;
        }
    }
